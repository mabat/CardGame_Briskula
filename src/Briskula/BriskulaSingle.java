package Briskula;

import java.awt.Image;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class BriskulaSingle extends javax.swing.JFrame {

    /**
     * Creates new form Briskula
     *
     * @throws java.io.IOException
     */
    public BriskulaSingle() throws IOException {

        //pokretanje igre
        initComponents();
        gameCounter = new int[]{0, 0, 0, 0};
        g = new PlaySingleBriskula();

        try {
            //postavljanje slika na labele
            labelCard1.setIcon(new ImageIcon(g.getMe(0).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));//iz liste me(player) postavi sliku karte na labelu 1
            labelCard2.setIcon(new ImageIcon(g.getMe(1).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));//iz liste me(player) postavi sliku karte na labelu 2
            labelCard3.setIcon(new ImageIcon(g.getMe(2).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));//iz liste me(player) postavi sliku karte na labelu 3

            labelGameIn.setIcon(new ImageIcon(g.getGameCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
            labelGameInRotated.setIcon(new ImageIcon(g.getBackRotatedCard().cardImage.getScaledInstance(182, 100, Image.SCALE_SMOOTH)));

            //postavljanje karata sa poledjinom koje pokazuju comp playera
            labelComputerCard1.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
            labelComputerCard2.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
            labelComputerCard3.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));

        } catch (Exception e) {
            System.out.println(e);
        }

        if (!g.checkFlag()) { //ako je flag false znaci da je comp-ov red na igru
            compPlayFirst();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        labelCard2 = new javax.swing.JLabel();
        labelCard1 = new javax.swing.JLabel();
        labelCard3 = new javax.swing.JLabel();
        labelGameInRotated = new javax.swing.JLabel();
        buttPick = new javax.swing.JButton();
        labelScoreComp1 = new javax.swing.JLabel();
        labelScoreComp2 = new javax.swing.JLabel();
        labelScorePlayer1 = new javax.swing.JLabel();
        labelScorePlayer2 = new javax.swing.JLabel();
        labelGameIn = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        labelHand1 = new javax.swing.JLabel();
        labelHand2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        labelComputerCard3 = new javax.swing.JLabel();
        labelComputerCard2 = new javax.swing.JLabel();
        labelComputerCard1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuNewGame = new javax.swing.JMenuItem();
        MenuShowScore = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuViewTotalScore = new javax.swing.JMenuItem();
        MenuReset = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        MenuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Briskula Single");
        setPreferredSize(new java.awt.Dimension(1000, 600));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        labelCard2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCard2MouseClicked(evt);
            }
        });

        labelCard1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCard1MouseClicked(evt);
            }
        });

        labelCard3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCard3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCard2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCard1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labelCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {labelCard1, labelCard2});

        buttPick.setText("Pick");
        buttPick.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttPickMouseClicked(evt);
            }
        });

        labelScoreComp1.setText("Computer:");

        labelScoreComp2.setText("0");

        labelScorePlayer1.setText("Player:");

        labelScorePlayer2.setText("0");

        jPanel3.setBackground(new java.awt.Color(0, 51, 51));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelHand2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(labelHand1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelHand2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(58, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(labelHand1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jPanel4.setBackground(new java.awt.Color(0, 51, 51));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(labelComputerCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(53, Short.MAX_VALUE)
                    .addComponent(labelComputerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(49, 49, 49)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(63, Short.MAX_VALUE)
                    .addComponent(labelComputerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(39, 39, 39)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(labelComputerCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(24, Short.MAX_VALUE)
                    .addComponent(labelComputerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(11, 11, 11)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(34, Short.MAX_VALUE)
                    .addComponent(labelComputerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(1, 1, 1)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(labelScoreComp1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelScoreComp2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelScorePlayer1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelScorePlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttPick, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(71, 71, 71))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelGameInRotated, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(1101, Short.MAX_VALUE)
                    .addComponent(labelGameIn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(160, 160, 160)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelScoreComp1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelScoreComp2))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelGameInRotated, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttPick, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)))
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelScorePlayer1)
                            .addComponent(labelScorePlayer2))))
                .addContainerGap(122, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(62, 62, 62)
                    .addComponent(labelGameIn, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(522, Short.MAX_VALUE)))
        );

        jMenu1.setText("File");

        MenuNewGame.setText("New Game");
        MenuNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNewGameActionPerformed(evt);
            }
        });
        jMenu1.add(MenuNewGame);

        MenuShowScore.setSelected(true);
        MenuShowScore.setText("Show Score");
        MenuShowScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuShowScoreActionPerformed(evt);
            }
        });
        jMenu1.add(MenuShowScore);

        jMenu3.setText("Total Score");

        menuViewTotalScore.setText("View Total Score");
        menuViewTotalScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuViewTotalScoreActionPerformed(evt);
            }
        });
        jMenu3.add(menuViewTotalScore);

        MenuReset.setText("Reset Total Score");
        MenuReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuResetActionPerformed(evt);
            }
        });
        jMenu3.add(MenuReset);

        jMenu1.add(jMenu3);
        jMenu1.add(jSeparator1);

        MenuMenu.setText("Menu");
        MenuMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuMenuActionPerformed(evt);
            }
        });
        jMenu1.add(MenuMenu);
        jMenu1.add(jSeparator2);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        MenuAbout.setText("About");
        MenuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAboutActionPerformed(evt);
            }
        });
        jMenu2.add(MenuAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void labelCard3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCard3MouseClicked

        clickCardAction(labelCard3, 2);
    }//GEN-LAST:event_labelCard3MouseClicked

    private void buttPickMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttPickMouseClicked

        if (labelHand1.getIcon() != null && labelHand2 != null) {

            g.hand(currentPlayer, currentComp); //pogledaj ciji je rezultat i zbroji punte

            labelScoreComp2.setText(Integer.toString(g.compScore())); //postavi score comp
            labelScorePlayer2.setText(Integer.toString(g.playerScore())); //postavi score player

            //isprazni label gdje se bacaju karte
            labelHand1.setIcon(null);
            labelHand2.setIcon(null);

            //ako ultima nije podignuta popuni sve labele
            if (labelGameInRotated.getIcon() != null) {

                //provjeri koji je label prazan i na njega dodaj novu kartu iz liste sa indexom karte koja fali
                if (labelCard1.getIcon() == null) {
                    labelCard1.setIcon(new ImageIcon(g.getMe(0).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
                } else if (labelCard2.getIcon() == null) {
                    labelCard2.setIcon(new ImageIcon(g.getMe(1).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
                } else if (labelCard3.getIcon() == null) {
                    labelCard3.setIcon(new ImageIcon(g.getMe(2).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
                }

                //pogledaj koja je straznja karta prazna i popuni to mjesto novom kartom sa poledjinom
                if (labelComputerCard1.getIcon() == null && currentComp != null) {
                    labelComputerCard1.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
                } else if (labelComputerCard2.getIcon() == null && currentComp != null) {
                    labelComputerCard2.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
                } else {
                    labelComputerCard3.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
                }
            }

            if (g.checkUltima()) {
                labelGameInRotated.setIcon(null);
                labelGameIn.setIcon(null);
            }

            //kraj igre
            if (g.cardSpilSize() == 0 && g.getCompCards().isEmpty()) {

                if (g.playerScore() > g.compScore()) {
                    gameCounter[0]++; //pobjeda playera
                } else if (g.playerScore() < g.compScore()) {
                    gameCounter[1]++;//pobjeda compa
                } else {
                    gameCounter[2]++; //nerijeseno
                }
                gameCounter[3]++; //odigrane partije

                //izbrisi sve sa ekrana
                buttPick.setVisible(false);
                labelScoreComp1.setVisible(false);
                labelScoreComp2.setVisible(false);
                labelScorePlayer1.setVisible(false);
                labelScorePlayer2.setVisible(false);

                if (g.compScore() > g.playerScore()) {
                    JOptionPane.showMessageDialog(this, g.playerScore() + " : " + g.compScore() + "\nYOU LOST!!\n\nOdigrano: " + gameCounter[3] + " partija\nPobjede: " + gameCounter[0] + "\nPorazi: " + gameCounter[1] + "\nNerjeseno: " + gameCounter[2] + "\n", "Game over", JOptionPane.INFORMATION_MESSAGE);
                } else if (g.compScore() < g.playerScore()) {
                    JOptionPane.showMessageDialog(this, g.playerScore() + " : " + g.compScore() + "\nYOU WON!!\n\nOdigrano: " + gameCounter[3] + " partija\nPobjede: " + gameCounter[0] + "\nPorazi: " + gameCounter[1] + "\nNerjeseno: " + gameCounter[2] + "\n", "Game over", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, g.playerScore() + " : " + g.compScore() + "\nDEUCE!!\n\nOdigrano: " + gameCounter[3] + " partija\nPobjede: " + gameCounter[0] + "\nPorazi: " + gameCounter[1] + "\nNerjeseno: " + gameCounter[2] + "\n", "Game over", JOptionPane.INFORMATION_MESSAGE);
                }

            } else if (!g.checkFlag()) { //ako je flag false znaci da je comp-ov red na igru
                compPlayFirst();
            }
        }
    }//GEN-LAST:event_buttPickMouseClicked

    private void labelCard2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCard2MouseClicked

        clickCardAction(labelCard2, 1);
    }//GEN-LAST:event_labelCard2MouseClicked

    private void labelCard1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCard1MouseClicked

        clickCardAction(labelCard1, 0);
    }//GEN-LAST:event_labelCard1MouseClicked

    private void MenuResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuResetActionPerformed

        for (int i = 0; i < gameCounter.length; ++i) {
            gameCounter[i] = 0;
        }
        JOptionPane.showMessageDialog(this, "Odigrano: " + gameCounter[3] + " partija\nPobjede: " + gameCounter[0] + "\nPorazi: " + gameCounter[1] + "\nNerjeseno: " + gameCounter[2] + "\n");
    }//GEN-LAST:event_MenuResetActionPerformed

    private void MenuNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNewGameActionPerformed

        g = null;
        g = new PlaySingleBriskula();

        try {
            //postavljanje slika na labele
            labelCard1.setIcon(new ImageIcon(g.getMe(0).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));//iz liste me(player) postavi sliku karte na labelu 1
            labelCard2.setIcon(new ImageIcon(g.getMe(1).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));//iz liste me(player) postavi sliku karte na labelu 2
            labelCard3.setIcon(new ImageIcon(g.getMe(2).cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));//iz liste me(player) postavi sliku karte na labelu 3

            labelGameIn.setIcon(new ImageIcon(g.getGameCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
            labelGameInRotated.setIcon(new ImageIcon(g.getBackRotatedCard().cardImage.getScaledInstance(182, 100, Image.SCALE_SMOOTH)));

            //postavljanje karata sa poledjinom koje pokazuju comp playera
            labelComputerCard1.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
            labelComputerCard2.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));
            labelComputerCard3.setIcon(new ImageIcon(g.getBackCard().cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));

            buttPick.setVisible(true);
            labelScoreComp1.setVisible(true);
            labelScoreComp2.setVisible(true);
            labelScorePlayer1.setVisible(true);
            labelScorePlayer2.setVisible(true);

            labelScoreComp2.setText(Integer.toString(g.compScore())); //postavi score comp
            labelScorePlayer2.setText(Integer.toString(g.playerScore())); //postavi score player

        } catch (Exception e) {
            System.out.println(e);
        }

        if (!g.checkFlag()) { //ako je flag false znaci da je comp-ov red na igru
            compPlayFirst();
        }
    }//GEN-LAST:event_MenuNewGameActionPerformed

    private void MenuShowScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuShowScoreActionPerformed

        if (!MenuShowScore.isSelected()) {
            labelScoreComp1.setVisible(false);
            labelScoreComp2.setVisible(false);
            labelScorePlayer1.setVisible(false);
            labelScorePlayer2.setVisible(false);
        } else {
            labelScoreComp1.setVisible(true);
            labelScoreComp2.setVisible(true);
            labelScorePlayer1.setVisible(true);
            labelScorePlayer2.setVisible(true);
        }
    }//GEN-LAST:event_MenuShowScoreActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Exit
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void MenuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAboutActionPerformed

        JOptionPane.showMessageDialog(this, "Briškula 1.0\n\nDeveloped by\nMarko Batarelo", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_MenuAboutActionPerformed

    private void MenuMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuMenuActionPerformed
        new Menu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_MenuMenuActionPerformed

    private void menuViewTotalScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuViewTotalScoreActionPerformed
        JOptionPane.showMessageDialog(this, "Odigrano: " + gameCounter[3] + " partija\nPobjede: " + gameCounter[0] + "\nPorazi: " + gameCounter[1] + "\nNerjeseno: " + gameCounter[2] + "\n", "Total Score", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuViewTotalScoreActionPerformed

    private void compPlayFirst() { //prvi igra comp
        currentComp = g.bestCompCard(); //karta koja sluzi za igru od srane comp-a 

        labelHand2.setIcon(new ImageIcon(currentComp.cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH))); //postavi sliku karte s kojom comp igra na stol

        //da se izbrisu na zavrsetku partije sve labele
        if (labelComputerCard1.getIcon() != null && labelComputerCard2.getIcon() != null && labelComputerCard3.getIcon() != null) {
            labelComputerCard1.setIcon(null); //isprazni sliku labele prazne karte
        } else if (labelComputerCard1.getIcon() == null && labelComputerCard2.getIcon() != null && labelComputerCard3.getIcon() != null) {
            labelComputerCard2.setIcon(null);
        } else {
            labelComputerCard3.setIcon(null);
        }

    }

    private void compPlaySecond() { //ako je prije player igra
        currentComp = g.getCompCard(currentPlayer); //karta koja sluzi za igru od srane comp-a 

        labelHand2.setIcon(new ImageIcon(currentComp.cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH))); //postavi sliku karte s kojom comp igra na stol
        //da se izbrisu na zavrsetku partije sve labele
        if (labelComputerCard1.getIcon() != null && labelComputerCard2.getIcon() != null && labelComputerCard3.getIcon() != null) {
            labelComputerCard1.setIcon(null); //isprazni sliku labele prazne karte
        } else if (labelComputerCard1.getIcon() == null && labelComputerCard2.getIcon() != null && labelComputerCard3.getIcon() != null) {
            labelComputerCard2.setIcon(null);
        } else {
            labelComputerCard3.setIcon(null);
        }
    }

    private void clickCardAction(javax.swing.JLabel labelCard, int position) {

        if (labelHand1.getIcon() == null) { //ako je vec bacena karta nemoj bacati drugu

            //currentPLayer je karta koja nam sluzi za igru, ako kliknemo labelu3, onda iz liste me(player) pokupimo taj objekt, 
            //a na listu me se automatski pokupi nova karta koja se nakon pick-a pojavi na ekranu u labeli
            currentPlayer = g.getMeCard(position); //first card
            labelHand1.setIcon(new ImageIcon(currentPlayer.cardImage.getScaledInstance(100, 182, Image.SCALE_SMOOTH)));//postavi sliku karte s kojim igramo na stol gdje bacamo karte
            labelCard.setIcon(null);//isprazni sliku na lanbeli3 jer smo bacili tu kartu

            if (labelHand2.getIcon() == null) {//ako je mjesto na stolu gdje ide karta od compa prazno znaci da je comp-ov red na igru
                compPlaySecond();
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BriskulaSingle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BriskulaSingle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BriskulaSingle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BriskulaSingle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new BriskulaSingle().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(BriskulaSingle.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuAbout;
    private javax.swing.JMenuItem MenuMenu;
    private javax.swing.JMenuItem MenuNewGame;
    private javax.swing.JMenuItem MenuReset;
    private javax.swing.JCheckBoxMenuItem MenuShowScore;
    private javax.swing.JButton buttPick;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel labelCard1;
    private javax.swing.JLabel labelCard2;
    private javax.swing.JLabel labelCard3;
    private javax.swing.JLabel labelComputerCard1;
    private javax.swing.JLabel labelComputerCard2;
    private javax.swing.JLabel labelComputerCard3;
    private javax.swing.JLabel labelGameIn;
    private javax.swing.JLabel labelGameInRotated;
    private javax.swing.JLabel labelHand1;
    private javax.swing.JLabel labelHand2;
    private javax.swing.JLabel labelScoreComp1;
    private javax.swing.JLabel labelScoreComp2;
    private javax.swing.JLabel labelScorePlayer1;
    private javax.swing.JLabel labelScorePlayer2;
    private javax.swing.JMenuItem menuViewTotalScore;
    // End of variables declaration//GEN-END:variables

    private PlaySingleBriskula g;
    private Card currentPlayer;
    private Card currentComp;
    private int[] gameCounter; //broji odigrane partije

}
